module webtank.db.postgresql.bindings;

import webtank.db.postgresql.consts: ExecStatusType;

extern (C)
{
	alias uint Oid;

	struct PGconn;
	struct PGresult;

	PGconn *PQconnectdb(const char *conninfo); // New connection to the database server.

	/++ Submits a command to the server and waits for the result. +/
	PGresult* PQexec(PGconn *conn, const char *command);

	ExecStatusType PQresultStatus(const PGresult* res);

	PGresult *PQexecParams(
		PGconn *conn,
		const char *command,
		int nParams,
		const Oid *paramTypes,
		const char** paramValues,
		const int *paramLengths,
		const int *paramFormats,
		int resultFormat
	);

	/++ Closes the connection to the server. Also frees memory used by the PGconn object. +/
	void PQfinish(PGconn *conn);

	int PQntuples(const PGresult *res); // Number of rows in table
	int PQnfields(const PGresult *res); // Number of columns in table

	/++ Returns name of column with specified number or NULL if number is out of range +/
	char *PQfname(const PGresult *res, int column_number);

	/++ Returns column number with specified or -1 if the given name does not match any column +/
	int PQfnumber(const PGresult *res, const char *column_name);

	/++ Returns a single field value of one row of a PGresult. Row and column numbers start at 0 +/
	char *PQgetvalue(const PGresult *res, int row_number, int column_number);

	/++ Tests a field for a null value. Row and column numbers start at 0. +/
	int PQgetisnull(const PGresult *res, int row_number, int column_number);

	/++ Returns the actual length of a field value in bytes. Row and column numbers start at 0. +/
	int PQgetlength(const PGresult *res, int row_number, int column_number);

	void PQclear(PGresult *res); // Frees the storage associated with a PGresult.

	/++ Returns the error message most recently generated by an operation on the connection. +/
	char *PQerrorMessage(const PGconn *conn);

	// Returns the status of the connection.
	int PQstatus(const PGconn *conn);
}